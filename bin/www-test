'use strict';

global.config = {
  userServer: 'http://pci.violetqqy.com/pci-user/',
  healthServer: 'http://pci.violetqqy.com/pro-health/',
  server: 'http://pci.violetqqy.com/pci-micro/',
  domain: 'http://pci.violetqqy.com',
  root: '/pci-wechat',
  filedir: '/home/admin/webapp/pci-wechat-h5',
  appId: 'wx6737d318e27dab75',
  secret:'51b60cb4c922f5eef335f3b2d3e19c5e'
}

var app = require('../app');
var debug = require('debug')('pci-wechat-test:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`(START) [${new Date()}] Your application is runing on port: ${port} ${global.config.root}/`);
}



